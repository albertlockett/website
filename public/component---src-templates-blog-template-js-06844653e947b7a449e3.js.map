{"version":3,"sources":["webpack:///./src/components/poppingImage.js","webpack:///./src/templates/htmlAstRenderer.js","webpack:///./src/templates/blogTemplate.js"],"names":["PoppingImage","props","useState","displayBig","setDisplayBig","style","maxWidth","maxHeight","padding","cursor","background","border","zIndex","className","onClick","width","height","position","top","src","left","opacity","renderComponent","definition","type","value","tagName","console","log","properties","children","undefined","child","push","component","warn","getComponent","href","endsWith","React","createElement","Template","data","markdownRemark","frontmatter","htmlAst","html","innerStuff","htmlAstRenderer","title","date","pageQuery"],"mappings":"mKAGe,SAASA,EAAaC,GAAQ,IAAD,EACNC,oBAAS,GAAtCC,EADmC,KACvBC,EADuB,KAE1C,OACE,0BAAMC,MAAO,CAAEC,SAAU,QAASC,UAAW,UAC3C,4BACEF,MAAO,CACLG,QAAS,EACTC,OAAQ,UACRC,WAAY,QACZC,OAAQ,OACRC,OAAQ,GAEVC,UAAU,yBACVC,QAAS,kBAAMV,GAAc,KAE3B,yBACEC,MAAO,CACLU,MAAO,GACPC,OAAQ,GACRP,OAAQ,UACRQ,SAAU,WACVC,IAAK,EACLN,OAAQ,GAEVO,IAAI,qBAGThB,GACC,yBACEW,QAAS,kBAAMV,GAAc,IAC7BC,MAAO,CACLY,SAAU,QACVF,MAAO,QACPC,OAAQ,QACRE,IAAK,EACLE,KAAM,EACNR,OAAQ,EACRH,OAAQ,YAGR,yBAAKJ,MAAO,CACVY,SAAU,WACVD,OAAQ,OACRD,MAAO,OACPL,WAAY,OACZW,QAAS,GACTT,OAAQ,KAEV,yBAAKP,MAAO,CACV,SAAY,WACZ,IAAO,MACP,KAAQ,MACR,UAAa,wBACbO,OAAQ,IAER,yBAAKO,IAAKlB,EAAMkB,SCxC9B,SAASG,EAAgBC,GACvB,GAAwB,SAApBA,EAAWC,KACb,OAAOD,EAAWE,MAGpB,GAAwB,YAApBF,EAAWC,MAA6C,QAAvBD,EAAWG,QAE9C,OADAC,QAAQC,IAAIL,GACL,kBAACvB,EAAiBuB,EAAWM,YAGtC,IAAMC,EAAW,GAEjB,QAAIC,IAAcR,EAAWO,SAC3B,OAAkBP,EAAWO,SAA7B,wDAAuC,CAAC,IAAD,oFAA9BE,EAA8B,EACrCF,EAASG,KAAKX,EAAgBU,KAIlC,IAAME,EAhCR,SAAsBX,GAEpB,MAAwB,SAApBA,EAAWC,KACN,MAGe,YAApBD,EAAWC,KACND,EAAWG,SAGpBC,QAAQQ,KAAK,oDAAqDZ,GAC3D,QAqBWa,CAAab,GAEzBtB,EAAQ,GAOd,MANkB,MAAdiC,KACIX,EAAWM,WAAWQ,MAAQ,QAAQC,SAAS,UACnDrC,EAAMoC,KAAOd,EAAWM,WAAWQ,OAIhCE,IAAMC,cAAcN,EAAWjC,EAAO6B,G,UCtChC,SAASW,EAAT,GAEX,IADFC,EACC,EADDA,KAEQC,EAAmBD,EAAnBC,eACRhB,QAAQC,IAAI,CAAEc,SAFb,IAGOE,EAA8BD,EAA9BC,YAAmBC,GAAWF,EAAjBG,KAAiBH,EAAXE,SAC3BlB,QAAQC,IAAI,CAAEe,mBAEd,IAAMI,EDiCO,SAAuBF,GACpC,OAAOvB,EAAgBuB,GClCJG,CAAgBH,GACnC,OACE,yBAAKhC,UAAU,uBACb,6BACE,8BACE,uBAAGwB,KAAK,KAAR,SAEF,0BAAMxB,UAAU,kBAAhB,OACA,0CACA,0BAAMA,UAAU,kBAAhB,QAEF,yBAAKA,UAAU,aACb,yBAAKA,UAAU,cAAc+B,EAAYK,OACzC,yBAAKpC,UAAU,aAAa+B,EAAYM,MACvCH,IA7BT,kFAmCO,IAAMI,EAAS","file":"component---src-templates-blog-template-js-06844653e947b7a449e3.js","sourcesContent":["import React, { useState } from 'react'\nimport PropTypes from 'prop-types'\n\nexport default function PoppingImage(props) {\n  const [displayBig, setDisplayBig] = useState(false)\n  return (\n    <span style={{ maxWidth: '100px', maxHeight: '100px' }}>\n      <button\n        style={{\n          padding: 0,\n          cursor: 'pointer',\n          background: 'white',\n          border: 'none',\n          zIndex: 0,\n        }}\n        className=\"display-picture-button\" \n        onClick={() => setDisplayBig(true)}\n       >\n          <img \n            style={{\n              width: 12,\n              height: 12,\n              cursor: 'pointer',\n              position: 'relative',\n              top: 2,\n              zIndex: 1,\n            }} \n            src=\"/image_icon.png\"\n          />\n      </button>\n      {displayBig && (\n        <div \n          onClick={() => setDisplayBig(false)}\n          style={{\n            position: 'fixed',\n            width: '100vw',\n            height: '100vh',\n            top: 0,\n            left: 0,\n            zIndex: 2,\n            cursor: 'pointer',\n          }}\n         >\n            <div style={{\n              position: 'absolute',\n              height: '100%',\n              width: '100%',\n              background: '#333',\n              opacity: 0.8,\n              zIndex: 3,\n            }} />\n            <div style={{\n              'position': 'absolute',\n              'top': '50%',\n              'left': '50%',\n              'transform': 'translate(-50%, -50%)',\n              zIndex: 4,\n            }}>\n              <img src={props.src} />\n            </div>\n        </div>\n      )}\n    </span>\n  )\n}\n\nPoppingImage.propTypes = {\n  alt: PropTypes.string,\n  title: PropTypes.string,\n  src: PropTypes.string,\n}","import React from 'react'\n\nimport PoppingImage from '../components/poppingImage'\n\nfunction getComponent(definition) {\n  \n  if (definition.type === 'root') {\n    return 'div'\n  }\n\n  if (definition.type === 'element') {\n    return definition.tagName\n  }\n\n  console.warn('could not determine component type for defniition', definition)\n  return 'span'\n}\n\nfunction renderComponent(definition) {\n  if (definition.type === 'text') {\n    return definition.value\n  }\n\n  if (definition.type === 'element' && definition.tagName === 'img') {\n    console.log(definition)\n    return <PoppingImage {...definition.properties} />\n  }\n\n  const children = []\n\n  if (undefined !== definition.children) {\n    for (let child of definition.children) {\n      children.push(renderComponent(child))\n    }\n  }\n\n  const component = getComponent(definition);\n\n  const props = {}\n  if (component === 'a') {\n    if (!(definition.properties.href || '.png').endsWith('.png')) {\n      props.href = definition.properties.href\n    }\n  }\n\n  return React.createElement(component, props, children)\n}\n\nexport default function renderFullAst(htmlAst) {\n  return renderComponent(htmlAst)\n}","import React from \"react\"\nimport { graphql } from \"gatsby\"\n\nimport htmlAstRenderer from './htmlAstRenderer'\nimport './blog-styles.css'\n\n\nexport default function Template({\n  data, // this prop will be injected by the GraphQL query below.\n}) {\n  const { markdownRemark } = data // data.markdownRemark holds your post data\n  console.log({ data })\n  const { frontmatter, html, htmlAst} = markdownRemark\n  console.log({ markdownRemark })\n\n  const innerStuff = htmlAstRenderer(htmlAst)\n  return (\n    <div className=\"blog-post-container\">\n      <div>\n        <span>\n          <a href=\"/\">Home</a>\n        </span>\n        <span className=\"breadcrumb-sep\"> > </span>\n        <span>Articles</span>\n        <span className=\"breadcrumb-sep\"> > </span>\n      </div>\n      <div className=\"blog-post\">\n        <div className=\"post-title\">{frontmatter.title}</div>\n        <div className=\"post-date\">{frontmatter.date}</div>\n        {innerStuff}\n      </div>\n    </div>\n  )\n}\n\nexport const pageQuery = graphql`\n  query($path: String!) {\n    markdownRemark(frontmatter: { path: { eq: $path } }) {\n      html\n      htmlAst\n      frontmatter {\n        date(formatString: \"MMMM DD, YYYY\")\n        path\n        title\n      }\n    }\n  }\n`"],"sourceRoot":""}